
#name: Deploy to Play Store
#
#on:
#  push:
#    branches:
#      - develop
#
#jobs:
#  build-release:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v3
#      - name: Download dependencies
#        run: npm install
#      - name: Make Gradlew Executable
#        run: cd android && chmod +x ./gradlew
#      - name: Generate Release AAB
#        run: cd android && ./gradlew bundleRelease
#      - name: Sign AAB
#        uses: r0adkll/sign-android-release@v1
#        id: sign_app
#        with:
#          releaseDirectory: android/app/build/outputs/bundle/release
#          signingKeyBase64: ${{ secrets.SIGNING_KEY }}
#          alias: ${{ secrets.ALIAS }}
#          keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
#          keyPassword: ${{ secrets.KEY_PASSWORD }}
#      - name: upload app-release.aab
#        uses: actions/upload-artifact@master
#        with:
#          name: app-release.aab
#          path: ${{steps.sign_app.outputs.signedReleaseFile}}
#
#  deploy-play-store:
#    needs: [build-release]
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/download-artifact@master
#        with:
#          name: app-release.aab
#      - name: Publish to Play Store internal test track
#        uses: r0adkll/upload-google-play@v1
#        with:
#          serviceAccountJsonPlainText: ${{ secrets.SERVICE_ACCOUNT_JSON }}
#          packageName: com.test.test.awesomeproject
#          releaseFile: app-release.aab
#          track: internal
#          status: completed
#
name: deploy App Store

on:
  push:
    branches: 
      - develop

jobs:
  deploy:
    runs-on: macos-11

    steps:
      - name: Checkout project
        uses: actions/checkout@v3

      - name: Set environment variables from project settings
        run: |
          exec .github/scripts/set-env-from-xcodeproj.sh
      - name: Import signing certificate
        env:
          SIGNING_CERTIFICATE_P12_DATA: ${{ secrets.APPLE_SIGNING_CERTIFICATE_P12_DATA }}
          SIGNING_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_SIGNING_CERTIFICATE_PASSWORD }}
        run: |
          exec .github/scripts/import-certificate.sh
      - name: Import provisioning profile
        env:
          PROVISIONING_PROFILE_DATA: ${{ secrets.APPLE_PROVISIONING_PROFILE_DATA }}
        run: |
          exec .github/scripts/import-profile.sh
          ls -l ~/Library/MobileDevice/Provisioning\ Profiles
      - name: Build app
        run: |
          gem install cocoapods
          gem install fastlane
          npm install -y cocoapods
          cd ios
          pod install
          fastlane run build_app
      - name: Upload build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: build.log
          path: ~/Library/Logs/gym/*.log

#      - name: Upload release assets
#        if: startsWith(github.ref, 'refs/tags/v')
#        uses: softprops/action-gh-release@v1
#        with:
#          files: |
#            ${{ env.PRODUCT_NAME }}.ipa
#            ${{ env.PRODUCT_NAME }}.app.dSYM.zip
#        env:
#          GITHUB_TOKEN: ${{ secrets.APPLE_GITHUB_TOKEN }}

      - name: Upload app to App Store Connect
#        if: startsWith(github.ref, 'refs/tags/v')
        env:
          APP_STORE_CONNECT_USERNAME: ${{ secrets.APPLE_APP_STORE_CONNECT_USERNAME }}
          APP_STORE_CONNECT_PASSWORD: ${{ secrets.APPLE_APP_STORE_CONNECT_PASSWORD }}
        run: |
          cd ios
          xcrun altool --upload-app -t ios -f "$PRODUCT_NAME.ipa" -u "$APP_STORE_CONNECT_USERNAME" -p "$APP_STORE_CONNECT_PASSWORD"